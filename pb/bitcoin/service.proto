syntax = "proto3";

package pb.bitcoin;
option go_package = ".;bitcoin";
option java_package = "co.ledger.protobuf.bitcoin.libgrpc";

// CoinService exposes a gRPC interface to wrap protocol-centric logic
// related to Bitcoin.
//
// The current naming convention is to use the full canonical name of the
// cryptocurrency, as opposed to the ticker.
service CoinService {
  // ValidateAddress checks whether an address (for the given chain parameters)
  // is valid or not. If invalid, it also includes a string explaining the
  // reason.
  rpc ValidateAddress(ValidateAddressRequest) returns (ValidateAddressResponse) {}

  // DeriveExtendedKey accepts a base58-encoded serialized extended key and
  // a derivation path, and returns a child extended key derived according to
  // BIP0032 derivation rules.
  rpc DeriveExtendedKey(DeriveExtendedKeyRequest) returns (DeriveExtendedKeyResponse) {}

  // EncodeAddress accepts a serialized public key and an encoding format,
  // and returns the encoded address as a string.
  //
  // Both compressed as well as uncompressed public keys are supported,
  // although they are internally converted to the right format before
  // encoding the address.
  //
  // The method also takes in the chain parameters for using network-specific
  // HD version bytes during encoding.
  rpc EncodeAddress(EncodeAddressRequest) returns (EncodeAddressResponse) {}

  // GetAccountExtendedKey accepts public key material and parameters, and
  // returns the serialized extended public key.
  rpc GetAccountExtendedKey(GetAccountExtendedKeyRequest) returns (GetAccountExtendedKeyResponse) {}

  // CreateTransaction prepares a transaction and returns a raw tx in order to be signed.
  rpc CreateTransaction(CreateTransactionRequest) returns (RawTransactionResponse) {}

  // GetKeypair accepts an optional seed and a bitcoin network 
  // and returns a keypair of extended public key / private key.
  rpc GetKeypair(GetKeypairRequest) returns (GetKeypairResponse) {}

  // GenerateDerSignatures 
  rpc GenerateDerSignatures(GenerateDerSignaturesRequest) returns (GenerateDerSignaturesResponse) {}

  // SignTransaction takes a raw tx and DER signatures,
  // then compute scripts for all inputs.
  // It returns the raw tx signed in order to be broadcasted.
  rpc SignTransaction(SignTransactionRequest) returns (RawTransactionResponse) {}
}

// Network enumerates the list of all supported Bitcoin and forks networks. It
// also indicates the coin for which the networks are defined, in this case,
// Bitcoin.
//
// This enum type may be used by gRPC clients to differentiate protocol
// behaviour, magic numbers, addresses, keys, etc., for one network from those
// intended for use on another network.
enum Network {
  NETWORK_UNSPECIFIED = 0;  // Fallback value if unrecognized / unspecified
  NETWORK_BITCOIN_MAINNET     = 1;  // Main network
  NETWORK_BITCOIN_TESTNET3    = 2;  // Current test network (since Bitcoin Core v0.7)
  NETWORK_BITCOIN_REGTEST     = 3;  // Regression test network
  NETWORK_LITECOIN_MAINNET    = 4;  // Litecoin main network
}

// ChainParams defines all the configuration required to uniquely identify a
// coin, along with its network.
//
// It can accommodate Bitcoin forks in future in a backwards compatible way.
//
// Currently, it only includes network information, although more fields may
// be included in future.
message ChainParams {
  oneof network {
    Network bitcoin_network = 1;
  }
}

// ValidateAddressRequest defines the input request passed to ValidateAddress
// RPC method.
message ValidateAddressRequest {
  // Address to be validated.
  string address = 1;

  // Chain params to identify the coin and network for which the address
  // must be validated.
  ChainParams chain_params = 2;
}

// ValidateAddressResponse wraps the output response of ValidateAddress RPC.
message ValidateAddressResponse {
  // Address in normalized form, if valid; original address otherwise.
  string address = 1;

  // Whether the input address is valid or not.
  bool is_valid = 2;

  // Human-readable reason for the address being invalid. Use ONLY if is_valid
  // is false.
  string invalid_reason = 3;
}

// DeriveExtendedKeyRequest defines the input request passed to DeriveExtendedKey
// RPC method.
message DeriveExtendedKeyRequest {
  // Extended key serialized as a base58-encoded string.
  string extended_key = 1;

  // Derivation path relative to HD depth of extended_key field.
  //
  // The derivation path is represented by an array of child indexes. Each
  // child index in the path must be between 0 and 2^31-1, i.e., they should
  // not be hardened.
  repeated uint32 derivation = 2;
}

// DeriveExtendedKeyResponse wraps the output response of DeriveExtendedKey RPC.
message DeriveExtendedKeyResponse {
  // Extended key serialized as a base58-encoded string.
  string extended_key = 1;

  // Serialized compressed public key associated with the extended key derived
  // at the specified derivation path.
  //
  // This field is 33 bytes long.
  bytes public_key = 2;

  // Serialized chain code associated with the extended key derived at the
  // specified derivation path.
  //
  // This field is 32 bytes long.
  bytes chain_code = 3;
}

// GetAccountExtendedKeyRequest models the request passed to GetAccountExtendedKey
// RPC.
message GetAccountExtendedKeyRequest {
  // Serialized public key associated with the extended key derived
  // at the account-level derivation path.
  //
  // Both compressed as well as uncompressed public keys are accepted.
  bytes public_key = 1;

  // Serialized chain code associated with the extended key derived at the
  // account-level derivation path.
  //
  // This field is 32 bytes long.
  bytes chain_code = 2;

  // Index at BIP32 level 3.
  uint32 account_index = 3;

  // Chain params to identify the coin and network for which the extended
  // public key must be generated.
  ChainParams chain_params = 4;
}

// GetAccountExtendedKeyResponse wraps the output response of GetAccountExtendedKey RPC.
message GetAccountExtendedKeyResponse {
  // Extended key serialized as a base58-encoded string.
  string extended_key = 1;
}

// AddressEncoding enumerates the list of all supported encoding formats, for
// serializing addresses.
//
// It is agnostic of the chain parameters.
enum AddressEncoding {
  ADDRESS_ENCODING_UNSPECIFIED  = 0;  // Fallback value if unrecognized / unspecified
  ADDRESS_ENCODING_P2PKH        = 1;  // Pay-to-PubKey-Hash
  ADDRESS_ENCODING_P2SH_P2WPKH  = 2;  // Pay-to-Witness-PubKey-Hash in Pay-to-Script-Hash
  ADDRESS_ENCODING_P2WPKH       = 3;  // Pay-to-Witness-PubKey-Hash
}

// EncodeAddressRequest defines the input request passed to EncodeAddress
// RPC method.
message EncodeAddressRequest {
  // Serialized public key from which the address must be encoded.
  //
  // This field must be 33 bytes long, for compressed keys, or 65 bytes long
  // for uncompressed keys.
  bytes public_key = 1;

  // Address encoding scheme to use.
  AddressEncoding encoding = 3;

  // Chain params to identify the coin and network to be used for encoding the
  // address.
  ChainParams chain_params = 4;
}

// EncodeAddressResponse wraps the output response of EncodeAddress RPC.
message EncodeAddressResponse {
  // Address serialized from the given public key, using the specified encoding.
  string address = 1;
}


// CreateTransactionRequest defines the input request passed to the
// CreateTransaction RPC method.
message CreateTransactionRequest {
  // Lock time during which the transaction cannot be broadcasted
  uint32 lock_time = 1;
  // Inputs : UTXOs used to send coins
  repeated Input inputs = 2;
  // Outputs : Addresses of the recipients and Amounts send
  repeated Output outputs = 3;
  // Network used (Main, Test, Reg...)
  Network network = 4;
  // Change Address
  string change_address = 5;
  // Fee per kb in Satoshi
  int64 fee_sat_per_kb = 6;
}

// RawTransactionResponse defines the builded raw tx.
message RawTransactionResponse {
  // hex contains the unsigned transaction serialized according to bitcoin
  // encoding.
  string hex = 1;

  // hash contains the transaction hash, which is computed by doing a
  // double-SHA256 on the encoded transaction.
  string hash = 2;

  // witness_hash contains hash of the transaction, that is encoded according to
  // the BIP144 Witness serialization rules.
  //
  // Same as hash if no witness is present.
  string witness_hash = 3;

  // If not enough utxos to pay for fees.
  NotEnoughUtxo not_enough_utxo = 4;
}

message NotEnoughUtxo {
  int64 missing_amount = 1;
}

// This is the definition of a transaction input
message Input {
  // Hash of the utxo transaction
  string output_hash = 1;
  // Index of the utxo in the transaction
  int32 output_index = 2;
  // The script in utxo to estimate fees
  bytes script = 3;
  // The amount to estimate change
  int64 value = 4;
}

// This is the definition of a transaction Output
message Output {
  // Address of the reciepent
  string address = 1;
  // Amount of coins to be sent
  string value = 2;
}

message GetKeypairRequest {
  // Optional seed
  string seed = 1;
  // Network used (Main, Test, Reg...)
  Network network = 2;
  // Derivation path
  repeated uint32 derivation = 3;
}

message GetKeypairResponse {
  // Extended public key
  string extended_public_key = 1;
  // Private key
  string private_key = 2;
}

message Utxo {
  // Output script hex
  string script_hex = 1;
  // Output value
  string value = 2;
  // Derivation path
  repeated uint32 derivation = 3;
}

message GenerateDerSignaturesRequest {
  // Unsigned raw tx
  RawTransactionResponse raw_tx = 1;
  // Utxos
  repeated Utxo utxos = 2;
  // Master private key
  string private_key = 3;
}

message GenerateDerSignaturesResponse {
  repeated bytes der_signatures = 1;
}

message SignTransactionRequest {
  // Unsigned raw tx
  RawTransactionResponse raw_tx = 1;
  // Network used (Main, Test, Reg...)
  Network network = 2;
  // Signatures metadata
  repeated SignatureMetadata signatures = 3;
}

message SignatureMetadata {
  // Der signature
  bytes der_signature = 1;
  // Input pub key
  string public_key = 2;
  // Input Address encoding
  AddressEncoding addr_encoding = 3;
}
