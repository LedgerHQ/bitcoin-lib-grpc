syntax = "proto3";
option go_package = ".;protobuf";


// BitcoinService exposes a gRPC interface to wrap protocol-centric logic
// related to Bitcoin.
//
// The current naming convention is to use the full canonical name of the
// cryptocurrency, as opposed to the ticker.
service BitcoinService {
  // ValidateAddress checks whether an address (for the given chain parameters)
  // is valid or not. If invalid, it also includes a string explaining the
  // reason.
  rpc ValidateAddress(ValidateAddressRequest) returns (ValidateAddressResponse) {}
}

// BitcoinNetwork enumerates the list of all supported Bitcoin networks. It
// also indicates the coin for which the networks are defined, in this case,
// Bitcoin.
//
// This enum type may be used by gRPC clients to differentiate protocol
// behaviour, magic numbers, addresses, keys, etc., for one network from those
// intended for use on another network.
enum BitcoinNetwork {
  BITCOIN_NETWORK_UNSPECIFIED = 0;  // Fallback value if unrecognized / unspecified
  BITCOIN_NETWORK_MAINNET     = 1;  // Main network
  BITCOIN_NETWORK_TESTNET3    = 2;  // Current test network (since Bitcoin Core v0.7)
  BITCOIN_NETWORK_REGTEST     = 3;  // Regression test network
}

// ChainParams defines all the configuration required to uniquely identify a
// coin, along with its network.
//
// It can accommodate Bitcoin forks in future in a backwards compatible way.
//
// Currently, it only includes network information, although more fields may
// be included in future.
message ChainParams {
  oneof network {
    BitcoinNetwork bitcoin_network = 1;
  }
}

// ValidateAddressRequest defines the input request passed to ValidateAddress
// RPC method.
message ValidateAddressRequest {
  // address to be validated.
  string address = 1;

  // chain params to identify the coin and network for which the address
  // must be validated.
  ChainParams chain_params = 2;
}

// ValidateAddressResponse wraps the output response of ValidateAddress RPC.
message ValidateAddressResponse {
  // Address in normalized form, if valid; original address otherwise.
  string address = 1;

  // Whether the input address is valid or not.
  bool is_valid = 2;

  // Human-readable reason for the address being invalid. Use ONLY if is_valid
  // is false.
  string invalid_reason = 3;
}
